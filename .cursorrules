### Project rules: Python with uv only

- **Python execution**: Always run Python via uv.
  - Use `uv run python <script.py>` or `uv run -m <module>`.
  - Do not use `python`, `pipenv run`, `poetry run`, or raw `venv` activations.

- **Package management**: Use uv for all dependency operations.
  - Add packages: `uv add <package>` (dev deps: `uv add --dev <package>`)
  - Remove packages: `uv remove <package>`
  - Sync from lock: `uv sync`
  - Update/lock: `uv lock` (CI: prefer `uv sync --frozen`)
  - Never use `pip`, `pip3`, `pip-tools`, `poetry`, or `conda` in this project.

- **Testing**: Run tests through uv.
  - Default test command: `uv run pytest`
  - Examples:
    - File: `uv run pytest tests/test_model.py`
    - Keyword: `uv run pytest -k "pattern"`
    - Quiet: `uv run pytest -q`

- **Scripts and tooling**:
  - Invoke Python CLIs via `uv run <tool>`.
  - Examples: `uv run ruff check .`, `uv run mypy .`, `uv run black .`.

- **Command generation (assistant)**:
  - Assume uv is available and initialized (uses `pyproject.toml` and `uv.lock`).
  - Prefer non-interactive flags when applicable.

- **Prohibited**:
  - Creating or activating virtual environments manually.
  - Using system Python directly for repo tasks.

### PyTorch restrictions

- **PyTorch module restrictions**: Do not use the following PyTorch modules:
  - `torch.nn` (except for container classes and Parameter)
  - `torch.nn.functional`
  - `torch.optim` (except for the Optimizer base class)

- **Allowed PyTorch components**:
  - `torch.nn.Parameter` - for creating learnable parameters
  - `torch.nn` container classes: `Module`, `ModuleList`, `Sequential`, etc.
  - `torch.optim.Optimizer` - the base optimizer class
  - All other PyTorch modules (`torch`, `torch.tensor`, etc.)

- **Rationale**: This restriction encourages manual implementation of neural network components and optimization algorithms for educational purposes.

These rules apply to all development, CI, and testing workflows in this repository.
